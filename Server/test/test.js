//During the test the env variable is set to test
require('dotenv').config()
process.env.NODE_ENV = 'test';
process.env.UBI_CONTRACT_NETWORK_NAME =  "localhost" ;
const bytecode= "0x60806040526000600860006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b506040518060400160405280600381526020017f55626900000000000000000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f55424900000000000000000000000000000000000000000000000000000000008152508160039081620000aa91906200042d565b508060049081620000bc91906200042d565b505050620000df620000d3620000e560201b60201c565b620000ed60201b60201c565b62000514565b600033905090565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200023557607f821691505b6020821081036200024b576200024a620001ed565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002b57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000276565b620002c1868362000276565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200030e620003086200030284620002d9565b620002e3565b620002d9565b9050919050565b6000819050919050565b6200032a83620002ed565b62000342620003398262000315565b84845462000283565b825550505050565b600090565b620003596200034a565b620003668184846200031f565b505050565b5b818110156200038e57620003826000826200034f565b6001810190506200036c565b5050565b601f821115620003dd57620003a78162000251565b620003b28462000266565b81016020851015620003c2578190505b620003da620003d18562000266565b8301826200036b565b50505b505050565b600082821c905092915050565b60006200040260001984600802620003e2565b1980831691505092915050565b60006200041d8383620003ef565b9150826002028217905092915050565b6200043882620001b3565b67ffffffffffffffff811115620004545762000453620001be565b5b6200046082546200021c565b6200046d82828562000392565b600060209050601f831160018114620004a5576000841562000490578287015190505b6200049c85826200040f565b8655506200050c565b601f198416620004b58662000251565b60005b82811015620004df57848901518255600182019150602085019450602081019050620004b8565b86831015620004ff5784890151620004fb601f891682620003ef565b8355505b6001600288020188555050505b505050505050565b6129c680620005246000396000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a0823111610104578063b0336553116100a2578063d86860b411610071578063d86860b4146104e4578063dd62ed3e14610502578063f2fde38b14610532578063fc9c8d391461054e576101cf565b8063b033655314610472578063beb92f551461048e578063bff1f9e1146104aa578063d1fa9db0146104c8576101cf565b806395d89b41116100de57806395d89b41146103d85780639fb755d7146103f6578063a457c2d714610412578063a9059cbb14610442576101cf565b806370a0823114610380578063715018a6146103b05780638da5cb5b146103ba576101cf565b8063395093511161017157806350acf8bc1161014b57806350acf8bc1461031e5780636244e4361461033c57806368d1d7c3146103465780636be13c9214610362576101cf565b806339509351146102c857806342966c68146102f85780634e71d92d14610314576101cf565b806318160ddd116101ad57806318160ddd1461023e57806323b872dd1461025c57806329113bc81461028c578063313ce567146102aa576101cf565b806306087e5b146101d457806306fdde03146101f0578063095ea7b31461020e575b600080fd5b6101ee60048036038101906101e99190611bb8565b61056c565b005b6101f861065c565b6040516102059190611c75565b60405180910390f35b61022860048036038101906102239190611ccd565b6106ee565b6040516102359190611d28565b60405180910390f35b610246610711565b6040516102539190611d52565b60405180910390f35b61027660048036038101906102719190611d6d565b61071b565b6040516102839190611d28565b60405180910390f35b61029461074a565b6040516102a19190611dcf565b60405180910390f35b6102b2610770565b6040516102bf9190611e06565b60405180910390f35b6102e260048036038101906102dd9190611ccd565b610779565b6040516102ef9190611d28565b60405180910390f35b610312600480360381019061030d9190611e21565b6107b0565b005b61031c6107c4565b005b610326610a3c565b6040516103339190611d52565b60405180910390f35b610344610a42565b005b610360600480360381019061035b9190611e21565b610a81565b005b61036a610b1b565b6040516103779190611dcf565b60405180910390f35b61039a60048036038101906103959190611bb8565b610b41565b6040516103a79190611d52565b60405180910390f35b6103b8610b89565b005b6103c2610b9d565b6040516103cf9190611dcf565b60405180910390f35b6103e0610bc7565b6040516103ed9190611c75565b60405180910390f35b610410600480360381019061040b9190611bb8565b610c59565b005b61042c60048036038101906104279190611ccd565b610d49565b6040516104399190611d28565b60405180910390f35b61045c60048036038101906104579190611ccd565b610dc0565b6040516104699190611d28565b60405180910390f35b61048c60048036038101906104879190611e21565b610de3565b005b6104a860048036038101906104a39190611bb8565b610e8e565b005b6104b2610f7e565b6040516104bf9190611d52565b60405180910390f35b6104e260048036038101906104dd9190611e21565b610f84565b005b6104ec6110db565b6040516104f99190611d52565b60405180910390f35b61051c60048036038101906105179190611e4e565b6110e1565b6040516105299190611d52565b60405180910390f35b61054c60048036038101906105479190611bb8565b611168565b005b6105566111eb565b6040516105639190611dcf565b60405180910390f35b610574611211565b6000600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f69ff773e01eea1108355b60001344a154c4c790cfc8ce132c0859ddb5c48a08560405160405180910390a35050565b60606003805461066b90611ebd565b80601f016020809104026020016040519081016040528092919081815260200182805461069790611ebd565b80156106e45780601f106106b9576101008083540402835291602001916106e4565b820191906000526020600020905b8154815290600101906020018083116106c757829003601f168201915b5050505050905090565b6000806106f961128f565b9050610706818585611297565b600191505092915050565b6000600254905090565b60008061072661128f565b9050610733858285611460565b61073e8585856114ec565b60019150509392505050565b600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006012905090565b60008061078461128f565b90506107a581858561079685896110e1565b6107a09190611f1d565b611297565b600191505092915050565b6107c16107bb61128f565b82611762565b50565b6107cc61128f565b73ffffffffffffffffffffffffffffffffffffffff16600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461085b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161085290611fc3565b60405180910390fd5b6220f5806fffffffffffffffffffffffffffffffff166006544261087f9190611fe3565b10156108c0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b790612089565b60405180910390fd5b600860009054906101000a900460ff1661090f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109069061211b565b60405180910390fd5b6000685dbab1f35d8a6400006fffffffffffffffffffffffffffffffff1660075461093a919061213b565b90506000612710600b548361094f919061213b565b61095991906121ac565b9050610987600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168261192f565b6109be600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1682846109b99190611fe3565b61192f565b426006819055506000600860006101000a81548160ff0219169083151502179055506006546109eb61128f565b73ffffffffffffffffffffffffffffffffffffffff167f34fcbac0073d7c3d388e51312faf357774904998eeb8fca628b9e6f65ee1cbf784604051610a309190611d52565b60405180910390a35050565b600b5481565b610a4a611211565b6000600681905550427f8c108ec6c641060f8438b8607dc42bf468060db7f810f1882b9bb3ba78901e9c60405160405180910390a2565b610a89611211565b612710811115610ace576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac59061224f565b60405180910390fd5b6000600b54905081600b819055507f827feb4bd0e67cbf9e06ca9f6691860177a6cd3bb4fbac9dfea212abb7c3db6b81600b54604051610b0f92919061226f565b60405180910390a15050565b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610b91611211565b610b9b6000611a85565b565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060048054610bd690611ebd565b80601f0160208091040260200160405190810160405280929190818152602001828054610c0290611ebd565b8015610c4f5780601f10610c2457610100808354040283529160200191610c4f565b820191906000526020600020905b815481529060010190602001808311610c3257829003601f168201915b5050505050905090565b610c61611211565b6000600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600960006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600960009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f823c64d761c8f6072e3fe4db941454d8b8d5f554d0a44effb6c3aee31c805ae360405160405180910390a35050565b600080610d5461128f565b90506000610d6282866110e1565b905083811015610da7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d9e9061230a565b60405180910390fd5b610db48286868403611297565b60019250505092915050565b600080610dcb61128f565b9050610dd88185856114ec565b600191505092915050565b610deb61128f565b73ffffffffffffffffffffffffffffffffffffffff16600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610e7a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e7190611fc3565b60405180910390fd5b610e8381610f84565b610e8b6107c4565b50565b610e96611211565b6000600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600860016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f86929e0d76ab21a1298b441b0304e9afc3b782b9427e04d6f12144fb4633b4e260405160405180910390a35050565b60075481565b610f8c61128f565b73ffffffffffffffffffffffffffffffffffffffff16600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161461101b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101290611fc3565b60405180910390fd5b6000811161105e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110559061239c565b60405180910390fd5b806007819055506001600860006101000a81548160ff0219169083151502179055504261108961128f565b73ffffffffffffffffffffffffffffffffffffffff167fb52546e8570b5a6ca9561a02ebc1e58f8605e1673e991edfc1367ef04fae988f6007546040516110d09190611d52565b60405180910390a350565b60065481565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b611170611211565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036111df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d69061242e565b60405180910390fd5b6111e881611a85565b50565b600860019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61121961128f565b73ffffffffffffffffffffffffffffffffffffffff16611237610b9d565b73ffffffffffffffffffffffffffffffffffffffff161461128d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112849061249a565b60405180910390fd5b565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611306576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fd9061252c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611375576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136c906125be565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516114539190611d52565b60405180910390a3505050565b600061146c84846110e1565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146114e657818110156114d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114cf9061262a565b60405180910390fd5b6114e58484848403611297565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361155b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611552906126bc565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036115ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c19061274e565b60405180910390fd5b6115d5838383611b4b565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561165b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611652906127e0565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516117499190611d52565b60405180910390a361175c848484611b50565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036117d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117c890612872565b60405180910390fd5b6117dd82600083611b4b565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611863576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161185a90612904565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516119169190611d52565b60405180910390a361192a83600084611b50565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361199e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161199590612970565b60405180910390fd5b6119aa60008383611b4b565b80600260008282546119bc9190611f1d565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611a6d9190611d52565b60405180910390a3611a8160008383611b50565b5050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b505050565b505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611b8582611b5a565b9050919050565b611b9581611b7a565b8114611ba057600080fd5b50565b600081359050611bb281611b8c565b92915050565b600060208284031215611bce57611bcd611b55565b5b6000611bdc84828501611ba3565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611c1f578082015181840152602081019050611c04565b60008484015250505050565b6000601f19601f8301169050919050565b6000611c4782611be5565b611c518185611bf0565b9350611c61818560208601611c01565b611c6a81611c2b565b840191505092915050565b60006020820190508181036000830152611c8f8184611c3c565b905092915050565b6000819050919050565b611caa81611c97565b8114611cb557600080fd5b50565b600081359050611cc781611ca1565b92915050565b60008060408385031215611ce457611ce3611b55565b5b6000611cf285828601611ba3565b9250506020611d0385828601611cb8565b9150509250929050565b60008115159050919050565b611d2281611d0d565b82525050565b6000602082019050611d3d6000830184611d19565b92915050565b611d4c81611c97565b82525050565b6000602082019050611d676000830184611d43565b92915050565b600080600060608486031215611d8657611d85611b55565b5b6000611d9486828701611ba3565b9350506020611da586828701611ba3565b9250506040611db686828701611cb8565b9150509250925092565b611dc981611b7a565b82525050565b6000602082019050611de46000830184611dc0565b92915050565b600060ff82169050919050565b611e0081611dea565b82525050565b6000602082019050611e1b6000830184611df7565b92915050565b600060208284031215611e3757611e36611b55565b5b6000611e4584828501611cb8565b91505092915050565b60008060408385031215611e6557611e64611b55565b5b6000611e7385828601611ba3565b9250506020611e8485828601611ba3565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680611ed557607f821691505b602082108103611ee857611ee7611e8e565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f2882611c97565b9150611f3383611c97565b9250828201905080821115611f4b57611f4a611eee565b5b92915050565b7f43616c6c65723a2063616c6c6572206973206e6f74207468652063616c6c657260008201527f2061646472657373000000000000000000000000000000000000000000000000602082015250565b6000611fad602883611bf0565b9150611fb882611f51565b604082019050919050565b60006020820190508181036000830152611fdc81611fa0565b9050919050565b6000611fee82611c97565b9150611ff983611c97565b925082820390508181111561201157612010611eee565b5b92915050565b7f636c61696d3a206e6f7420656e6f7567682074696d652068617320706173736560008201527f6400000000000000000000000000000000000000000000000000000000000000602082015250565b6000612073602183611bf0565b915061207e82612017565b604082019050919050565b600060208201905081810360008301526120a281612066565b9050919050565b7f636c61696d3a206d6f6e74686c7920616374697665207573657273206e6f742060008201527f7570646174656400000000000000000000000000000000000000000000000000602082015250565b6000612105602783611bf0565b9150612110826120a9565b604082019050919050565b60006020820190508181036000830152612134816120f8565b9050919050565b600061214682611c97565b915061215183611c97565b925082820261215f81611c97565b9150828204841483151761217657612175611eee565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006121b782611c97565b91506121c283611c97565b9250826121d2576121d161217d565b5b828204905092915050565b7f73657450657263656e74616765486f7457616c6c65743a20746865207065726360008201527f656e74616765206d757374206265206c6f776572207468616e20313030303000602082015250565b6000612239603f83611bf0565b9150612244826121dd565b604082019050919050565b600060208201905081810360008301526122688161222c565b9050919050565b60006040820190506122846000830185611d43565b6122916020830184611d43565b9392505050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006122f4602583611bf0565b91506122ff82612298565b604082019050919050565b60006020820190508181036000830152612323816122e7565b9050919050565b7f73657441637469766555736572733a206163746976652075736572732061636360008201527f6f6e74206d7573742062652067726561746572207468616e2030000000000000602082015250565b6000612386603a83611bf0565b91506123918261232a565b604082019050919050565b600060208201905081810360008301526123b581612379565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612418602683611bf0565b9150612423826123bc565b604082019050919050565b600060208201905081810360008301526124478161240b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612484602083611bf0565b915061248f8261244e565b602082019050919050565b600060208201905081810360008301526124b381612477565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612516602483611bf0565b9150612521826124ba565b604082019050919050565b6000602082019050818103600083015261254581612509565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006125a8602283611bf0565b91506125b38261254c565b604082019050919050565b600060208201905081810360008301526125d78161259b565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b6000612614601d83611bf0565b915061261f826125de565b602082019050919050565b6000602082019050818103600083015261264381612607565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006126a6602583611bf0565b91506126b18261264a565b604082019050919050565b600060208201905081810360008301526126d581612699565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000612738602383611bf0565b9150612743826126dc565b604082019050919050565b600060208201905081810360008301526127678161272b565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006127ca602683611bf0565b91506127d58261276e565b604082019050919050565b600060208201905081810360008301526127f9816127bd565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061285c602183611bf0565b915061286782612800565b604082019050919050565b6000602082019050818103600083015261288b8161284f565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006128ee602283611bf0565b91506128f982612892565b604082019050919050565b6000602082019050818103600083015261291d816128e1565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600061295a601f83611bf0565b915061296582612924565b602082019050919050565b600060208201905081810360008301526129898161294d565b905091905056fea26469706673582212204298a12911ef8f36b9600db9b91842638b7459f1c8f207ce0fdcfe57cc3f6e4764736f6c63430008110033"
const abi = JSON.parse(process.env.UBI_CONTRACT_ABI)
let chai = require('chai');
let chaiHttp = require('chai-http');
const { ethers } = require("hardhat");
const {expect} = require("chai");
chai.use(chaiHttp);
let contractFactory;
let users = [];
before( done => {
    new Promise(async (resolve) => {
        contractFactory = await ethers.getContractFactory(abi, bytecode);
        users = await ethers.getSigners();
        done()
        resolve()
    })
})
describe('Transactions', () => {
    let deployedContract = null;
    let server = null;
    beforeEach((done) => {
        new Promise(async (resolve) => {
            try {
                deployedContract = await contractFactory.deploy();
                await deployedContract.deployed();
                process.env.UBI_CONTRACT_ADDRESS = deployedContract.address;
                process.env.ETH_CALLER_WALLET_ADDRESS = "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266";
                process.env.ETH_CALLER_WALLET_PRIVATE_KEY = "0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80";
                Object.keys(require.cache).forEach(function (key) {
                    delete require.cache[key];
                });
                server = require('../app')
                const axios = require('axios');
                axios.get = (url) => {
                    return new Promise(async (resolve) => {
                        if(url === `${process.env.DB_HOST}/totalUsers`){
                            resolve({status: 200, data: {totalUsers: 333}});
                        }
                    })
                }
                server.on("app_started", () => {
                    done()
                    resolve()
                })
            }catch (e) {
                console.log(e)
            }
        })
    });
    afterEach((done)=>{
        server.close(() => {
            done()
        });
    })
        /*
          * Test the /GET route
          */
    describe('/POST claim', () => {
        it('It should try to claim without being the caller', (done) => {
            chai.request(server)
                .post('/setActiveUsersAndClaim').end((err, res) => {
                expect(res.status).to.equal(500);
                expect(res.body.message.indexOf("caller is not the caller address")).not.to.equal(-1);
                done();
            });

        });
        it('It should try to claim without setting the wallets', (done) => {
            new Promise(async (resolve) => {
                await deployedContract.setCaller(users[0].address)
                chai.request(server).post('/setActiveUsersAndClaim').end(async (err, res) => {
                    expect(res.status).to.equal(500);
                    expect(res.body.message.indexOf("mint to the zero address")).not.to.equal(-1);
                    done();
                    resolve();
                });
            })
        });
        it('It should try to claim without setting the hot wallet', (done) => {
            new Promise(async (resolve) => {
                await deployedContract.setCaller(users[0].address)
                await deployedContract.setColdWallet(users[0].address)
                chai.request(server).post('/setActiveUsersAndClaim').end(async (err, res) => {
                    expect(res.status).to.equal(500);
                    expect(res.body.message.indexOf("mint to the zero address")).not.to.equal(-1);
                    done();
                    resolve();
                });
            })
        });
        it('It should try to claim without setting the cold wallet', (done) => {
            new Promise(async (resolve) => {
                await deployedContract.setCaller(users[0].address)
                await deployedContract.setHotWallet(users[0].address)
                chai.request(server).post('/setActiveUsersAndClaim').end(async (err, res) => {
                    expect(res.status).to.equal(500);
                    expect(res.body.message.indexOf("mint to the zero address")).not.to.equal(-1);
                    done();
                    resolve();
                });
            })
        });
        it('It should try to claim OK', (done) => {
            new Promise(async (resolve) => {
                await deployedContract.setCaller(users[0].address)
                await deployedContract.setColdWallet(users[0].address)
                await deployedContract.setHotWallet(users[0].address)
                chai.request(server).post('/setActiveUsersAndClaim').end(async (err, res) => {
                    expect(res.status).to.equal(200);
                    expect(res.body.transaction).not.to.equal("0x");
                    done();
                    resolve();
                });
            })
        });
        it('It should try to claim two times at the same month', (done) => {
            new Promise(async (resolve) => {
                await deployedContract.setCaller(users[0].address)
                await deployedContract.setColdWallet(users[0].address)
                await deployedContract.setHotWallet(users[0].address)
                chai.request(server).post('/setActiveUsersAndClaim').end(async () => {
                    chai.request(server).post('/setActiveUsersAndClaim').end(async (err, res) => {
                        expect(res.status).to.equal(500);
                        expect(res.body.message.indexOf("not enough time has passed")).not.to.equal(-1);
                        done();
                        resolve();
                    });
                });
            })
        });

        it('It should try to claim OK and get check it', (done) => {
            new Promise(async (resolve) => {
                await deployedContract.setCaller(users[0].address)
                await deployedContract.setColdWallet(users[0].address)
                await deployedContract.setHotWallet(users[0].address)
                chai.request(server).post('/setActiveUsersAndClaim').end(async (err, res) => {
                    const transaction = res.body;
                    chai.request(server).post('/checkTransactions').end(async (err, res) => {
                        console.log(transaction.transaction)
                        const found = res.body.find(element => element.hash === "transaction.transaction");
                        expect(res.status).to.equal(200);
                        expect(typeof found).not.to.equal("object");
                        done();
                        resolve();
                    });
                });
            })
        });
    });

});